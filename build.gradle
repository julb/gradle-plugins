buildscript {
	repositories {
		mavenLocal()
	 	mavenCentral()
	 	jcenter()
	 	maven {
            url 'https://repo.spring.io/milestone'
        }
	}

    dependencies {
    	classpath 'com.github.zafarkhaja:java-semver:0.9.0'
    }
}

task currentVersion {
	doLast {
		println version
	}
}

task currentReleaseVersion {
	doLast {
		println version.replaceAll('-SNAPSHOT', '')
	}
}

def changeVersionModes = [ 'Major', 'Minor', 'Patch', 'Release', 'Custom' ]
changeVersionModes.each { changeVersionMode ->
	task "changeVersion${changeVersionMode}" {
		doLast {
			File gradlePropertiesFile = new File(projectDir, 'gradle.properties')
			if(gradlePropertiesFile.exists()) {
				// Compute new version.
				println "[Julb] Asked to update version with parameter <$changeVersionMode>"
				def newVersion = ''
				if(changeVersionMode.equals('Custom')) {
					if(!rootProject.hasProperty("newVersion")) {
						throw new Exception('Missing newVersion property.')
					}
					newVersion = rootProject.newVersion
				} else if(changeVersionMode.equals('Release')) {
					newVersion = releaseVersionValue
				} else {
					def semverVersion = com.github.zafarkhaja.semver.Version.valueOf(version)
					if(changeVersionMode.equals('Major')) {
						semverVersion = semverVersion.incrementMajorVersion('SNAPSHOT')
					} else if(changeVersionMode.equals('Minor')) {
						semverVersion = semverVersion.incrementMinorVersion('SNAPSHOT')
					} else if(changeVersionMode.equals('Patch')) {
						semverVersion = semverVersion.incrementPatchVersion('SNAPSHOT')
					}
					newVersion = semverVersion.toString()
				}
				
				println "[Julb] New project version is $newVersion"

				// Update gradle.properties
				ant.propertyfile(file: 'gradle.properties') {
					entry(key: 'version', value: newVersion)
				}
			}
		}
	}
}